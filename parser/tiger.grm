%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE
  | UMINUS

%nonterm  program | expr
	| lvalue | valuelessExpr | exprSeq | noval | funcall | funparam
	| record | recordFields | array
	| decs | tydec | ty | tyfields | vardec | fundec
	  

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

		(* Define associativity and precedence *)
(* %nonassoc ASSIGN DO OF *)
(* %nonassoc ELSE *)
(* %nonassoc THEN *)
%nonassoc ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left MINUS PLUS
%left TIMES DIVIDE
%left UMINUS

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: expr   (print("always print this\n"))

expr : lvalue (print("expr -> lvalue\n"))
		(* NilExp, IntExp, StringExp, CallExp *)
     | NIL ()
     | INT (print("Integer:"^Int.toString(INT)^"\n"))
     | STRING (print("string:"^STRING^"\n"))
     | ID LPAREN funparam RPAREN (print("expr -> "^ID^"(foo,...)\n"))
		(* OpExp *)
     | MINUS expr   %prec UMINUS (print("Unary minus\n"))
     | expr TIMES expr (print("expr -> expr TIMES exp\n"))
     | expr PLUS expr (print("expr -> expr PLUS exp\n"))
     | expr MINUS expr (print("expr -> expr ope exp\n"))
     | expr DIVIDE expr (print("expr -> expr ope exp\n"))
     | expr EQ expr (print("expr -> expr ope exp\n"))
     | expr NEQ expr (print("expr -> expr ope exp\n"))
     | expr LT expr (print("expr -> expr ope exp\n"))
     | expr LE expr (print("expr -> expr ope exp\n"))
     | expr GT expr (print("expr -> expr ope exp\n"))
     | expr GE expr (print("expr -> expr ope exp\n"))
     | expr AND expr (print("expr -> expr ope exp\n"))
     | expr OR expr (print("expr -> expr OR exp\n"))
		(* RecordExp, SeqExp, AssingExp *)
     | record (print("expr -> record\n"))
     | LPAREN RPAREN ()
     | LPAREN expr RPAREN ()
     | LPAREN exprSeq RPAREN ()
     | lvalue ASSIGN expr (print("expr -> lvalue := expr \n"))
		(* IfExp, WhileExp, ForExp, BreakExp *)
     | IF expr THEN expr ()
     | IF expr THEN expr ELSE expr ()
     | WHILE expr DO expr ()
     | FOR ID ASSIGN expr TO expr DO expr ()
     | BREAK ()
		(* LetExp *)
     | LET decs IN END (print("expr -> LET with 0 expr\n"))
     | LET decs IN expr END (print("expr -> LET with 1 expr\n"))
     | LET decs IN exprSeq END (print("expr -> LET with exprSeq\n"))
		(* ArrayExp *)
     | ID LBRACK expr RBRACK OF expr (print("array -> id[expr] of expr\n"))
	  
(* SimpleVar, FieldVar, SubscriptVar *)
lvalue : ID (print("lvalue -> ID:"^ID^"\n"))
       | lvalue DOT ID ()
       | ID LBRACK expr RBRACK ()
       | lvalue LBRACK expr RBRACK ()

(* Helper for SeqExp *)
exprSeq : expr SEMICOLON expr ()
	| exprSeq SEMICOLON expr ()
		
(* Helper for CallExp *)
funparam : 			(* empty call *) ()
	| expr ()
	| funparam COMMA expr ()

(* Helper for RecordExp *)
record : ID LBRACE RBRACE ()
       | ID LBRACE recordFields RBRACE  ()

(* Helper for record *)
recordFields : ID EQ expr ()
	     | ID EQ expr COMMA recordFields ()


(* Decs *)
decs: 			()	(* empty *)
    | tydec decs ()
    | vardec decs ()
    | fundec decs ()
	  
(* TypeDec: helper for decs *)
tydec : TYPE ID EQ ty ()

(* Ty, Helper for TypeDec. NameTy, RecordTy, ArrayTy *)
ty : ID ()
   | LBRACE tyfields RBRACE ()
   | ARRAY OF ID ()

(* Helper for Ty. *)
tyfields :	 ()		(* epsilon *)
   | ID COLON ID  ()
   | ID COLON ID COMMA tyfields ()

(* FunctionDec, helper for Dec(s) *)
fundec : FUNCTION ID LPAREN tyfields RPAREN EQ expr ()
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ expr ()

(* VarDec, a helper for Dec(s) *)
vardec : VAR ID ASSIGN expr (print("vardec -> var id := expr\n"))
       | VAR ID COLON ID ASSIGN expr (print("vardec -> var id:id := expr\n"))


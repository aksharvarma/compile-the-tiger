/* 4 + $6;
$ ^
if 5 <= 5 then 0 else 1; /* just trying */
print  "ft\3457guybhnj"
if 2 = 3 then 4 > 2 "asgs"
*/

let
        type arr = array of int
        type arr2 = array of rec
        type rec = { f: int, g: string }
/*        type bad = { f: none, g: int } */
        type list = { first: int, rest: list }
        type rec2 = { f: int, g: string }
        type a = b
        type c = int
        type h = list
        type b = c
        var i := 0
        var j:a := 1
        var s9:b := 0
        var c:c := 1
        var t:rec := rec{ f=1, g="abc" }
        var l := list { first=0, rest= nil }
        var arr := arr[i] of 6
        function ab():int = i + ba()
        function ba():int = 6
/*
        type tree = { key : int, children: treelist }
        type treelist = {hd: tree, tl: treelist }

        function treeLeaves(t: tree) : int =
            if t = nil then 1
            else treelistLeaves(t.children)
        function treelistLeaves(L: treelist) : int =
            if L = nil then 0
            else treeLeaves(L.hd) + treelistLeaves(L.tl)

        */var s:string := "foo"
        function foo(a: int, b: string):int = (print(b); 5 + a)
        function bar(a: string) = print(a)
        function even(num: int):int = if (num = 0) then 1 else odd(num - 1)
        function odd(num: int):int = if (num = 0) then 0 else even(num - 1)

        type vbn = int
        type vbn1 = int

        function zxc(a: int) : int =
        let function yuh() = print("sd") in 4 end
        function zxc1() = print("I'm foo")

in
(while i do (print(s); if break then break else break; break);
if i then flush();
let in end;
for k := 5 to 7 do (while 2 < 4 do (break; print(s)); break);
if s = "foo" then bar("yes") else print("no");
(let var i := "bas" in print(i) end);(print(s);i < foo(i, s)))
end
